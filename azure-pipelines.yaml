name: Azure Pipelines

trigger:
- main

pool: myPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: '7309f336-b783-44d5-8bac-ad4974116f0c'
  projectRoot: $(System.DefaultWorkingDirectory)
  subscriptionId: '456cc604-544c-45f8-99d0-c1b73aeec440'
  resourceGroupName: 'Azuredevops'
  armBackendStorageAccountName: 'tfstate321820361'
  armBackendContainerName: 'tfstate'
  packerImageName: 'myPackerImage'
  environmentName: 'myEnvironment'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - script: |
        echo "==== BEGIN: File list for $(Build.BuildId) ===="
        find . -type f
      displayName: 'Log files at beginning of stage'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.2.9'

    - script: |
        echo "ARM_ACCESS_KEY is set: ${ARM_ACCESS_KEY:+yes}"
      displayName: "Check ARM_ACCESS_KEY presence"
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroupName)'
        backendAzureRmStorageAccountName: '$(armBackendStorageAccountName)'
        backendAzureRmContainerName: '$(armBackendContainerName)'
        backendAzureRmKey: 'test.terraform.tfstate'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform check vars
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-var-file="$(Agent.TempDirectory)/terraform.tfvars" -out="azure.plan"'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    # - task: InstallSSHKey@0
    #   condition: false
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'udacity_rsa'

    # - task: DownloadSecureFile@1
    #   condition: false
    #   name: udacity_public_key
    #   displayName: 'Download public key'
    #   inputs:
    #     secureFile: 'public.key'

    - task: DownloadSecureFile@1
      displayName: 'Download tfvars from Azure Files'
      inputs:
        secureFile: 'terraform.tfvars'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      condition: false
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: 'azure.plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - task: TerraformTaskV3@3
      condition: false
      displayName: Terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Upload Package'
      artifact: drop-ui-tests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: ''
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

  - job: AutomatedTesting
    condition: false
    displayName: Automated Testing
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: |
          sudo apt install nodejs -y
          sudo apt install npm -y
          sudo npm install -g newman
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: test-run-$(Build.BuildId)
    - script: |
        echo "==== END: Files at Build end ===="
        find . -type f
      displayName: 'Log files at end of Build stage'
#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    # pool:
    #   name: '$(packerImageName)'
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "==== END: Files at DEPLOY end ===="
              find . -type f
            displayName: 'Log files at end of DEPLOY stage'
          - task: AzureWebApp@1
            condition: false
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: 'myWebApp'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

          - task: CmdLine@2
            displayName: 'Summary - Starting standalone test @ endurance.jmx'
            inputs:
              script: |
                cd automatedtesting/jmeter/endurance
                rm -rf html
                rm -rf test-results.csv
                jmeter -n \
                  -t endurance.jmx \
                  -JbaseUrl=fakerestapi.azurewebsites.net \
                  -l test-results.csv \
                  -e -o html

          - task: CmdLine@2
            displayName: 'Summary - Starting standalone test @ stress.jmx'
            inputs:
              script: |
                cd automatedtesting/jmeter/stress-test
                rm -rf html
                rm -rf test-results.csv
                jmeter -n \
                  -t stress.jmx \
                  -JbaseUrl=fakerestapi.azurewebsites.net \
                  -l test-results.csv \
                  -e -o html
          - script: |
              echo "==== END: Files at DEPLOY end ===="
              find . -type f
            displayName: 'Log files at end of DEPLOY stage'
#--------------------------------------------#  
# SELENIUM TESTS STAGE
#--------------------------------------------#    
- stage: SeleniumTests
  jobs:
  - deployment: VMDeploy
    pool:
      vmImage: '$(packerImageName)'
    displayName: Selenium Tests
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-ui-tests
          - script: |
              echo "==== END: Files at TEST start ===="
              find . -type f
            displayName: 'Log files at end of TEST stage'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                cd ~/
                DIR=/home/testuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi
                mv /home/testuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip
                FILE=/home/testuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                    wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                    unzip -o chromedriver_linux64.zip
                    sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                fi
                export PATH=$PATH:/home/testuser/app
                echo "Starting Selenium Tests"
                python3 main.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."
          - script: |
              echo "==== END: Files at TEST end ===="
              find . -type f
            displayName: 'Log files at end of TEST stage'