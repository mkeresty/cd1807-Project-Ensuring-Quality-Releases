name: Azure Pipelines

trigger:
- main

pool: myPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: '1f3adfd5-a51a-40ec-899e-7a9a05837992'
  projectRoot: $(System.DefaultWorkingDirectory)
  subscriptionId: '0fadec41-9b39-430f-aa5d-ce7b49f9346c'
  resourceGroupName: 'Azuredevops'
  armBackendStorageAccountName: 'tfstate207391737'
  armBackendContainerName: 'tfstate'
  packerImageName: 'myPackerImage'
  environmentName: 'myEnvironment'
  azureWebAppName: 'webapp-odluser284939'
  webAppUrl: 'https://webapp-odluser284939.azurewebsites.net'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - script: |
        echo "==== BEGIN: File list for $(Build.BuildId) ===="
        find . -type f
      displayName: 'Log files at beginning of stage'
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.2.9'

    - script: |
        echo "ARM_ACCESS_KEY is set: ${ARM_ACCESS_KEY:+yes}"
      displayName: "Check ARM_ACCESS_KEY presence"
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroupName)'
        backendAzureRmStorageAccountName: '$(armBackendStorageAccountName)'
        backendAzureRmContainerName: '$(armBackendContainerName)'
        backendAzureRmKey: 'test.terraform.tfstate'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: Terraform check vars
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-var-file="$(Agent.TempDirectory)/terraform.tfvars" -out="azure.plan"'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    # - task: InstallSSHKey@0
    #   condition: false
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING'
    #     sshPublicKey: 'PUBLIC_KEY'
    #     sshKeySecureFile: 'udacity_rsa'

    # - task: DownloadSecureFile@1
    #   condition: false
    #   name: udacity_public_key
    #   displayName: 'Download public key'
    #   inputs:
    #     secureFile: 'public.key'

    - task: DownloadSecureFile@1
      displayName: 'Download tfvars from Azure Files'
      inputs:
        secureFile: 'terraform.tfvars'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      condition: false
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: 'azure.plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      env:
        ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)

    - task: TerraformTaskV3@3
      condition: false
      displayName: Terraform destroy
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'


    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-ui-tests.zip
      displayName: 'Upload Package'
      artifact: drop-ui-tests

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/test-suite'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-jmeter-tests.zip
      displayName: 'Upload Package'
      artifact: drop-jmeter-tests

    - task: ArchiveFiles@2
      displayName: 'Archive Postman Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip'

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-postman-tests.zip
      displayName: 'Upload Package'
      artifact: drop-postman-tests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      name: 'myPool'
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: drop-fakerestapi
              path: $(Pipeline.Workspace)/drop-fakerestapi
          - task: AzureWebApp@1
            condition: false
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: '$(azureWebAppName)'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          # - script: |
          #     echo "Health check"
          #     curl -s -o /dev/null -w "%{http_code}" $(webAppUrl)/api/v1/Activities


#--------------------------------------------#  
# JMETER TESTS STAGE
#--------------------------------------------#    
- stage: JMeterTests
  jobs:
  - deployment: JMeterDeploy
    pool:
      name: 'myPool'
    displayName: JMeter Tests
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: drop-jmeter-tests
              path: $(Pipeline.Workspace)/drop-jmeter-tests
          - script: |
              unzip -o $(Pipeline.Workspace)/drop-jmeter-tests/$(Build.BuildId)-jmeter-tests.zip -d $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests
            displayName: 'Unzip JMeter Tests'
          - script: |
              wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.2.1.tgz
              tar -xf apache-jmeter-5.2.1.tgz
              sudo mv apache-jmeter-5.2.1 /opt/jmeter
              sudo ln -s /opt/jmeter/bin/jmeter /usr/local/bin/jmeter
              sudo apt-get update
              sudo apt-get install -y openjdk-11-jdk
              export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
              export PATH=$JAVA_HOME/bin:$PATH
            displayName: 'Install JMeter'
          - script: |
              mkdir -p $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/results/endurance
              cd $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/endurance
              rm -f test-results.csv
              jmeter -n \
                -t endurance.jmx \
                -JbaseUrl=fakerestapi.azurewebsites.net \
                -l test-results.csv \
                -e -o $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/results/endurance
            displayName: 'Run endurance test'
          - script: |
              mkdir -p $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/results/stress-test
              cd $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/stress-test
              rm -f test-results.csv
              jmeter -n \
                -t stress.jmx \
                -JbaseUrl=fakerestapi.azurewebsites.net \
                -l test-results.csv \
                -e -o $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/results/stress-test
            displayName: 'Run stress test'
          - publish: $(Pipeline.Workspace)/drop-jmeter-tests/jmeter-tests/results/
            artifact: jmeter-report
            displayName: 'Publish JMeter HTML Reports'


#--------------------------------------------#  
# POSTMAN TESTS STAGE
#--------------------------------------------#    
- stage: PostmanTests
  jobs:
  - deployment: PostmanDeploy
    pool:
      name: 'myPool'
    displayName: Postman Tests
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: drop-postman-tests
              path: $(Pipeline.Workspace)/drop-postman-tests
          - script: |
              unzip -o $(Pipeline.Workspace)/drop-postman-tests/$(Build.BuildId)-postman-tests.zip -d $(Pipeline.Workspace)/drop-postman-tests/postman-tests
            displayName: 'Unzip Postman Tests'
          - script: |
              sudo apt install nodejs -y
              sudo apt install npm -y
              sudo npm install -g newman
              newman -v
            displayName: 'Install newman'
          - script: |
              cd $(Pipeline.Workspace)/drop-postman-tests/postman-tests
              newman run Udacity.postman_collection.json -e environment.json --reporters cli,junit --reporter-junit-export postman.xml
            displayName: 'Run postman regressiona and validation tests'
          - publish: $(Pipeline.Workspace)/drop-postman-tests/postman-tests/postman.xml
            artifact: postman-report
            displayName: 'Publish Postman Report'



#--------------------------------------------#  
# SELENIUM TESTS STAGE
#--------------------------------------------#    
- stage: SeleniumTests
  jobs:
  - deployment: SeleniumDeploy
    pool:
      name: 'myPool'
    displayName: Selenium Tests
    environment: 'myEnvironment'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: drop-ui-tests
              path: $(Pipeline.Workspace)/drop-ui-tests
          - script: |
              unzip -o $(Pipeline.Workspace)/drop-ui-tests/$(Build.BuildId)-ui-tests.zip -d $(Pipeline.Workspace)/drop-ui-tests/ui-tests
            displayName: 'Unzip Selenium Tests'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                set -e
                sudo apt-get update

                set +e
                sudo apt-get upgrade -y
                UPGRADE_CODE=$?
                set -e

                if [ "$UPGRADE_CODE" -ne 0 ] && [ "$UPGRADE_CODE" -ne 8 ]; then
                  echo "apt-get upgrade failed $UPGRADE_CODE"
                  exit $UPGRADE_CODE
                fi
                sudo apt-get install -y wget unzip python3-pip
                wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt-get install -y ./google-chrome-stable_current_amd64.deb || true
                CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+' | head -n1)
                CHROMEDRIVER_VERSION=$(wget -q -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
                unzip -o chromedriver_linux64.zip
                sudo mv chromedriver /usr/local/bin/chromedriver
                chmod +x /usr/local/bin/chromedriver

                pip3 install selenium

                cd $(Pipeline.Workspace)/drop-ui-tests/ui-tests
                python3 main.py --headless || exit 1

                pip3 install selenium

                cd $(Pipeline.Workspace)/drop-ui-tests/ui-tests
                python3 main.py --headless || exit 1
          - publish: $(Pipeline.Workspace)/drop-ui-tests/ui-tests/selenium.log
            artifact: selenium-report
            displayName: 'Publish Selenium Reports'